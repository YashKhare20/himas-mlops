name: PR Quality Checks

on:
  pull_request:
    branches:
      - main
      - feature_poc
    types: [opened, synchronize, reopened]

jobs:
  pr-validation:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black pylint bandit safety

    - name: Check code formatting with Black
      run: |
        cd PoC/Data-Pipeline
        black --check dags/ tests/ || echo "::warning::Code formatting issues found. Run 'black dags/ tests/' to fix."
      continue-on-error: true

    - name: Lint with flake8
      run: |
        cd PoC/Data-Pipeline
        # Stop the build if there are Python syntax errors or undefined names
        flake8 dags/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics

        # Exit-zero treats all errors as warnings
        flake8 dags/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true

    - name: Security check with Bandit
      run: |
        cd PoC/Data-Pipeline
        bandit -r dags/ -ll -f json -o bandit-report.json || true
        if [ -f bandit-report.json ]; then
          echo "Security scan completed. Check bandit-report.json for details."
        fi
      continue-on-error: true

    - name: Check for secrets
      run: |
        cd PoC/Data-Pipeline
        # Simple check for common secret patterns
        if grep -r -E '(password|secret|api_key|token)\s*=\s*["\047][^"\047]+["\047]' dags/ --exclude-dir=__pycache__; then
          echo "::error::Potential hardcoded secrets found!"
          exit 1
        fi

    - name: Check Python version compatibility
      run: |
        cd PoC/Data-Pipeline
        python -c "import sys; assert sys.version_info >= (3, 8), 'Python 3.8+ required'"

    - name: Validate requirements.txt
      run: |
        cd PoC/Data-Pipeline
        if [ ! -f requirements.txt ]; then
          echo "::error::requirements.txt not found!"
          exit 1
        fi

        # Check for pinned versions
        if grep -E '^[^=<>~]+$' requirements.txt | grep -v '^#' | grep -v '^$'; then
          echo "::warning::Some dependencies are not pinned to specific versions"
        fi

    - name: Check for TODO/FIXME comments
      run: |
        cd PoC/Data-Pipeline
        todos=$(grep -r -n "TODO\|FIXME\|XXX\|HACK" dags/ --exclude-dir=__pycache__ || true)
        if [ ! -z "$todos" ]; then
          echo "::notice::Found TODO/FIXME comments:"
          echo "$todos"
        fi

    - name: Generate PR report
      if: always()
      run: |
        echo "## PR Quality Check Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Checks Performed:" >> $GITHUB_STEP_SUMMARY
        echo "- Code formatting validation" >> $GITHUB_STEP_SUMMARY
        echo "- Linting checks" >> $GITHUB_STEP_SUMMARY
        echo "- Security scanning" >> $GITHUB_STEP_SUMMARY
        echo "- Secret detection" >> $GITHUB_STEP_SUMMARY
        echo "- Requirements validation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Address any warnings or errors above" >> $GITHUB_STEP_SUMMARY
        echo "2. Ensure all tests pass in the main CI workflow" >> $GITHUB_STEP_SUMMARY
        echo "3. Request review from team members" >> $GITHUB_STEP_SUMMARY

  size-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Check PR size
      run: |
        # Count changed files
        files_changed=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | wc -l)
        
        # Count lines changed
        lines_changed=$(git diff --stat origin/${{ github.base_ref }}...HEAD | tail -1 | awk '{print $4+$6}')
        
        echo "Files changed: $files_changed"
        echo "Lines changed: $lines_changed"
        
        if [ $files_changed -gt 50 ]; then
          echo "::warning::Large PR with $files_changed files. Consider breaking it into smaller PRs."
        fi
        
        if [ $lines_changed -gt 1000 ]; then
          echo "::warning::Large PR with $lines_changed lines changed. Consider breaking it into smaller PRs."
        fi
        
        echo "## PR Size Analysis" >> $GITHUB_STEP_SUMMARY
        echo "- Files changed: $files_changed" >> $GITHUB_STEP_SUMMARY
        echo "- Lines changed: $lines_changed" >> $GITHUB_STEP_SUMMARY

  branch-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Validate branch naming
      run: |
        branch_name="${{ github.head_ref }}"
        
        if [[ ! $branch_name =~ ^(feature_|hotfix_|bugfix_) ]]; then
          echo "::warning::Branch name should start with 'feature_', 'hotfix_', or 'bugfix_'"
        fi
        
        echo "## Branch Information" >> $GITHUB_STEP_SUMMARY
        echo "- Source branch: $branch_name" >> $GITHUB_STEP_SUMMARY
        echo "- Target branch: ${{ github.base_ref }}" >> $GITHUB_STEP_SUMMARY

  commit-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Check commit messages
      run: |
        # Get all commits in this PR
        commits=$(git log origin/${{ github.base_ref }}..HEAD --pretty=format:"%s")
        
        echo "## Commit Messages" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "$commits" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
        # Check for conventional commit format (optional)
        while IFS= read -r commit_msg; do
          if [[ ! $commit_msg =~ ^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?:\ .+ ]]; then
            echo "::notice::Commit message doesn't follow conventional format: $commit_msg"
          fi
        done <<< "$commits"